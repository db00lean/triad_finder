// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "max.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic max::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic max::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> max::ap_ST_fsm_state1 = "1";
const sc_lv<2> max::ap_ST_fsm_state2 = "10";
const sc_lv<16> max::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> max::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> max::ap_const_lv32_1 = "1";
const sc_lv<1> max::ap_const_lv1_1 = "1";
const sc_lv<1> max::ap_const_lv1_0 = "0";
const bool max::ap_const_boolean_1 = true;

max::max(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_y_data_V_U = new regslice_both<16>("regslice_both_y_data_V_U");
    regslice_both_y_data_V_U->ap_clk(ap_clk);
    regslice_both_y_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_y_data_V_U->data_in(ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4);
    regslice_both_y_data_V_U->vld_in(y_TVALID_int);
    regslice_both_y_data_V_U->ack_in(y_TREADY_int);
    regslice_both_y_data_V_U->data_out(y_TDATA);
    regslice_both_y_data_V_U->vld_out(regslice_both_y_data_V_U_vld_out);
    regslice_both_y_data_V_U->ack_out(y_TREADY);
    regslice_both_y_data_V_U->apdone_blk(regslice_both_y_data_V_U_apdone_blk);
    regslice_both_y_keep_V_U = new regslice_both<2>("regslice_both_y_keep_V_U");
    regslice_both_y_keep_V_U->ap_clk(ap_clk);
    regslice_both_y_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_y_keep_V_U->data_in(x_TKEEP_int);
    regslice_both_y_keep_V_U->vld_in(y_TVALID_int);
    regslice_both_y_keep_V_U->ack_in(regslice_both_y_keep_V_U_ack_in_dummy);
    regslice_both_y_keep_V_U->data_out(y_TKEEP);
    regslice_both_y_keep_V_U->vld_out(regslice_both_y_keep_V_U_vld_out);
    regslice_both_y_keep_V_U->ack_out(y_TREADY);
    regslice_both_y_keep_V_U->apdone_blk(regslice_both_y_keep_V_U_apdone_blk);
    regslice_both_y_strb_V_U = new regslice_both<2>("regslice_both_y_strb_V_U");
    regslice_both_y_strb_V_U->ap_clk(ap_clk);
    regslice_both_y_strb_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_y_strb_V_U->data_in(x_TSTRB_int);
    regslice_both_y_strb_V_U->vld_in(y_TVALID_int);
    regslice_both_y_strb_V_U->ack_in(regslice_both_y_strb_V_U_ack_in_dummy);
    regslice_both_y_strb_V_U->data_out(y_TSTRB);
    regslice_both_y_strb_V_U->vld_out(regslice_both_y_strb_V_U_vld_out);
    regslice_both_y_strb_V_U->ack_out(y_TREADY);
    regslice_both_y_strb_V_U->apdone_blk(regslice_both_y_strb_V_U_apdone_blk);
    regslice_both_y_user_V_U = new regslice_both<1>("regslice_both_y_user_V_U");
    regslice_both_y_user_V_U->ap_clk(ap_clk);
    regslice_both_y_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_y_user_V_U->data_in(x_TUSER_int);
    regslice_both_y_user_V_U->vld_in(y_TVALID_int);
    regslice_both_y_user_V_U->ack_in(regslice_both_y_user_V_U_ack_in_dummy);
    regslice_both_y_user_V_U->data_out(y_TUSER);
    regslice_both_y_user_V_U->vld_out(regslice_both_y_user_V_U_vld_out);
    regslice_both_y_user_V_U->ack_out(y_TREADY);
    regslice_both_y_user_V_U->apdone_blk(regslice_both_y_user_V_U_apdone_blk);
    regslice_both_y_last_V_U = new regslice_both<1>("regslice_both_y_last_V_U");
    regslice_both_y_last_V_U->ap_clk(ap_clk);
    regslice_both_y_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_y_last_V_U->data_in(x_TLAST_int);
    regslice_both_y_last_V_U->vld_in(y_TVALID_int);
    regslice_both_y_last_V_U->ack_in(regslice_both_y_last_V_U_ack_in_dummy);
    regslice_both_y_last_V_U->data_out(y_TLAST);
    regslice_both_y_last_V_U->vld_out(regslice_both_y_last_V_U_vld_out);
    regslice_both_y_last_V_U->ack_out(y_TREADY);
    regslice_both_y_last_V_U->apdone_blk(regslice_both_y_last_V_U_apdone_blk);
    regslice_both_y_id_V_U = new regslice_both<1>("regslice_both_y_id_V_U");
    regslice_both_y_id_V_U->ap_clk(ap_clk);
    regslice_both_y_id_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_y_id_V_U->data_in(x_TID_int);
    regslice_both_y_id_V_U->vld_in(y_TVALID_int);
    regslice_both_y_id_V_U->ack_in(regslice_both_y_id_V_U_ack_in_dummy);
    regslice_both_y_id_V_U->data_out(y_TID);
    regslice_both_y_id_V_U->vld_out(regslice_both_y_id_V_U_vld_out);
    regslice_both_y_id_V_U->ack_out(y_TREADY);
    regslice_both_y_id_V_U->apdone_blk(regslice_both_y_id_V_U_apdone_blk);
    regslice_both_y_dest_V_U = new regslice_both<1>("regslice_both_y_dest_V_U");
    regslice_both_y_dest_V_U->ap_clk(ap_clk);
    regslice_both_y_dest_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_y_dest_V_U->data_in(x_TDEST_int);
    regslice_both_y_dest_V_U->vld_in(y_TVALID_int);
    regslice_both_y_dest_V_U->ack_in(regslice_both_y_dest_V_U_ack_in_dummy);
    regslice_both_y_dest_V_U->data_out(y_TDEST);
    regslice_both_y_dest_V_U->vld_out(regslice_both_y_dest_V_U_vld_out);
    regslice_both_y_dest_V_U->ack_out(y_TREADY);
    regslice_both_y_dest_V_U->apdone_blk(regslice_both_y_dest_V_U_apdone_blk);
    regslice_both_x_data_V_U = new regslice_both<16>("regslice_both_x_data_V_U");
    regslice_both_x_data_V_U->ap_clk(ap_clk);
    regslice_both_x_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_x_data_V_U->data_in(x_TDATA);
    regslice_both_x_data_V_U->vld_in(x_TVALID);
    regslice_both_x_data_V_U->ack_in(regslice_both_x_data_V_U_ack_in);
    regslice_both_x_data_V_U->data_out(x_TDATA_int);
    regslice_both_x_data_V_U->vld_out(x_TVALID_int);
    regslice_both_x_data_V_U->ack_out(x_TREADY_int);
    regslice_both_x_data_V_U->apdone_blk(regslice_both_x_data_V_U_apdone_blk);
    regslice_both_x_keep_V_U = new regslice_both<2>("regslice_both_x_keep_V_U");
    regslice_both_x_keep_V_U->ap_clk(ap_clk);
    regslice_both_x_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_x_keep_V_U->data_in(x_TKEEP);
    regslice_both_x_keep_V_U->vld_in(x_TVALID);
    regslice_both_x_keep_V_U->ack_in(regslice_both_x_keep_V_U_ack_in);
    regslice_both_x_keep_V_U->data_out(x_TKEEP_int);
    regslice_both_x_keep_V_U->vld_out(regslice_both_x_keep_V_U_vld_out);
    regslice_both_x_keep_V_U->ack_out(x_TREADY_int);
    regslice_both_x_keep_V_U->apdone_blk(regslice_both_x_keep_V_U_apdone_blk);
    regslice_both_x_strb_V_U = new regslice_both<2>("regslice_both_x_strb_V_U");
    regslice_both_x_strb_V_U->ap_clk(ap_clk);
    regslice_both_x_strb_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_x_strb_V_U->data_in(x_TSTRB);
    regslice_both_x_strb_V_U->vld_in(x_TVALID);
    regslice_both_x_strb_V_U->ack_in(regslice_both_x_strb_V_U_ack_in);
    regslice_both_x_strb_V_U->data_out(x_TSTRB_int);
    regslice_both_x_strb_V_U->vld_out(regslice_both_x_strb_V_U_vld_out);
    regslice_both_x_strb_V_U->ack_out(x_TREADY_int);
    regslice_both_x_strb_V_U->apdone_blk(regslice_both_x_strb_V_U_apdone_blk);
    regslice_both_x_user_V_U = new regslice_both<1>("regslice_both_x_user_V_U");
    regslice_both_x_user_V_U->ap_clk(ap_clk);
    regslice_both_x_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_x_user_V_U->data_in(x_TUSER);
    regslice_both_x_user_V_U->vld_in(x_TVALID);
    regslice_both_x_user_V_U->ack_in(regslice_both_x_user_V_U_ack_in);
    regslice_both_x_user_V_U->data_out(x_TUSER_int);
    regslice_both_x_user_V_U->vld_out(regslice_both_x_user_V_U_vld_out);
    regslice_both_x_user_V_U->ack_out(x_TREADY_int);
    regslice_both_x_user_V_U->apdone_blk(regslice_both_x_user_V_U_apdone_blk);
    regslice_both_x_last_V_U = new regslice_both<1>("regslice_both_x_last_V_U");
    regslice_both_x_last_V_U->ap_clk(ap_clk);
    regslice_both_x_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_x_last_V_U->data_in(x_TLAST);
    regslice_both_x_last_V_U->vld_in(x_TVALID);
    regslice_both_x_last_V_U->ack_in(regslice_both_x_last_V_U_ack_in);
    regslice_both_x_last_V_U->data_out(x_TLAST_int);
    regslice_both_x_last_V_U->vld_out(regslice_both_x_last_V_U_vld_out);
    regslice_both_x_last_V_U->ack_out(x_TREADY_int);
    regslice_both_x_last_V_U->apdone_blk(regslice_both_x_last_V_U_apdone_blk);
    regslice_both_x_id_V_U = new regslice_both<1>("regslice_both_x_id_V_U");
    regslice_both_x_id_V_U->ap_clk(ap_clk);
    regslice_both_x_id_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_x_id_V_U->data_in(x_TID);
    regslice_both_x_id_V_U->vld_in(x_TVALID);
    regslice_both_x_id_V_U->ack_in(regslice_both_x_id_V_U_ack_in);
    regslice_both_x_id_V_U->data_out(x_TID_int);
    regslice_both_x_id_V_U->vld_out(regslice_both_x_id_V_U_vld_out);
    regslice_both_x_id_V_U->ack_out(x_TREADY_int);
    regslice_both_x_id_V_U->apdone_blk(regslice_both_x_id_V_U_apdone_blk);
    regslice_both_x_dest_V_U = new regslice_both<1>("regslice_both_x_dest_V_U");
    regslice_both_x_dest_V_U->ap_clk(ap_clk);
    regslice_both_x_dest_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_x_dest_V_U->data_in(x_TDEST);
    regslice_both_x_dest_V_U->vld_in(x_TVALID);
    regslice_both_x_dest_V_U->ack_in(regslice_both_x_dest_V_U_ack_in);
    regslice_both_x_dest_V_U->data_out(x_TDEST_int);
    regslice_both_x_dest_V_U->vld_out(regslice_both_x_dest_V_U_vld_out);
    regslice_both_x_dest_V_U->ack_out(x_TREADY_int);
    regslice_both_x_dest_V_U->apdone_blk(regslice_both_x_dest_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4);
    sensitive << ( max_value );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln887_fu_151_p2 );
    sensitive << ( x_TDATA_int );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_icmp_ln887_fu_151_p2);
    sensitive << ( max_value );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( y_TREADY_int );
    sensitive << ( x_TDATA_int );
    sensitive << ( x_TVALID_int );

    SC_METHOD(thread_x_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_TVALID_int );

    SC_METHOD(thread_x_TREADY);
    sensitive << ( x_TVALID );
    sensitive << ( regslice_both_x_data_V_U_ack_in );

    SC_METHOD(thread_x_TREADY_int);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( y_TREADY_int );
    sensitive << ( x_TVALID_int );

    SC_METHOD(thread_y_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( y_TREADY_int );

    SC_METHOD(thread_y_TVALID);
    sensitive << ( regslice_both_y_data_V_U_vld_out );

    SC_METHOD(thread_y_TVALID_int);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( y_TREADY_int );
    sensitive << ( x_TVALID_int );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_y_data_V_U_apdone_blk );
    sensitive << ( y_TREADY_int );
    sensitive << ( x_TVALID_int );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    max_value = "0000000000000000";
    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "max_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, y_TDATA, "(port)y_TDATA");
    sc_trace(mVcdFile, y_TVALID, "(port)y_TVALID");
    sc_trace(mVcdFile, y_TREADY, "(port)y_TREADY");
    sc_trace(mVcdFile, y_TKEEP, "(port)y_TKEEP");
    sc_trace(mVcdFile, y_TSTRB, "(port)y_TSTRB");
    sc_trace(mVcdFile, y_TUSER, "(port)y_TUSER");
    sc_trace(mVcdFile, y_TLAST, "(port)y_TLAST");
    sc_trace(mVcdFile, y_TID, "(port)y_TID");
    sc_trace(mVcdFile, y_TDEST, "(port)y_TDEST");
    sc_trace(mVcdFile, x_TDATA, "(port)x_TDATA");
    sc_trace(mVcdFile, x_TVALID, "(port)x_TVALID");
    sc_trace(mVcdFile, x_TREADY, "(port)x_TREADY");
    sc_trace(mVcdFile, x_TKEEP, "(port)x_TKEEP");
    sc_trace(mVcdFile, x_TSTRB, "(port)x_TSTRB");
    sc_trace(mVcdFile, x_TUSER, "(port)x_TUSER");
    sc_trace(mVcdFile, x_TLAST, "(port)x_TLAST");
    sc_trace(mVcdFile, x_TID, "(port)x_TID");
    sc_trace(mVcdFile, x_TDEST, "(port)x_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, max_value, "max_value");
    sc_trace(mVcdFile, y_TDATA_blk_n, "y_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, x_TDATA_blk_n, "x_TDATA_blk_n");
    sc_trace(mVcdFile, ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4, "ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4");
    sc_trace(mVcdFile, icmp_ln887_fu_151_p2, "icmp_ln887_fu_151_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, regslice_both_y_data_V_U_apdone_blk, "regslice_both_y_data_V_U_apdone_blk");
    sc_trace(mVcdFile, y_TVALID_int, "y_TVALID_int");
    sc_trace(mVcdFile, y_TREADY_int, "y_TREADY_int");
    sc_trace(mVcdFile, regslice_both_y_data_V_U_vld_out, "regslice_both_y_data_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_y_keep_V_U_apdone_blk, "regslice_both_y_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_y_keep_V_U_ack_in_dummy, "regslice_both_y_keep_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_y_keep_V_U_vld_out, "regslice_both_y_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_y_strb_V_U_apdone_blk, "regslice_both_y_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_y_strb_V_U_ack_in_dummy, "regslice_both_y_strb_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_y_strb_V_U_vld_out, "regslice_both_y_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_y_user_V_U_apdone_blk, "regslice_both_y_user_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_y_user_V_U_ack_in_dummy, "regslice_both_y_user_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_y_user_V_U_vld_out, "regslice_both_y_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_y_last_V_U_apdone_blk, "regslice_both_y_last_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_y_last_V_U_ack_in_dummy, "regslice_both_y_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_y_last_V_U_vld_out, "regslice_both_y_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_y_id_V_U_apdone_blk, "regslice_both_y_id_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_y_id_V_U_ack_in_dummy, "regslice_both_y_id_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_y_id_V_U_vld_out, "regslice_both_y_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_y_dest_V_U_apdone_blk, "regslice_both_y_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_y_dest_V_U_ack_in_dummy, "regslice_both_y_dest_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_y_dest_V_U_vld_out, "regslice_both_y_dest_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_x_data_V_U_apdone_blk, "regslice_both_x_data_V_U_apdone_blk");
    sc_trace(mVcdFile, x_TDATA_int, "x_TDATA_int");
    sc_trace(mVcdFile, x_TVALID_int, "x_TVALID_int");
    sc_trace(mVcdFile, x_TREADY_int, "x_TREADY_int");
    sc_trace(mVcdFile, regslice_both_x_data_V_U_ack_in, "regslice_both_x_data_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_x_keep_V_U_apdone_blk, "regslice_both_x_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, x_TKEEP_int, "x_TKEEP_int");
    sc_trace(mVcdFile, regslice_both_x_keep_V_U_vld_out, "regslice_both_x_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_x_keep_V_U_ack_in, "regslice_both_x_keep_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_x_strb_V_U_apdone_blk, "regslice_both_x_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, x_TSTRB_int, "x_TSTRB_int");
    sc_trace(mVcdFile, regslice_both_x_strb_V_U_vld_out, "regslice_both_x_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_x_strb_V_U_ack_in, "regslice_both_x_strb_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_x_user_V_U_apdone_blk, "regslice_both_x_user_V_U_apdone_blk");
    sc_trace(mVcdFile, x_TUSER_int, "x_TUSER_int");
    sc_trace(mVcdFile, regslice_both_x_user_V_U_vld_out, "regslice_both_x_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_x_user_V_U_ack_in, "regslice_both_x_user_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_x_last_V_U_apdone_blk, "regslice_both_x_last_V_U_apdone_blk");
    sc_trace(mVcdFile, x_TLAST_int, "x_TLAST_int");
    sc_trace(mVcdFile, regslice_both_x_last_V_U_vld_out, "regslice_both_x_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_x_last_V_U_ack_in, "regslice_both_x_last_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_x_id_V_U_apdone_blk, "regslice_both_x_id_V_U_apdone_blk");
    sc_trace(mVcdFile, x_TID_int, "x_TID_int");
    sc_trace(mVcdFile, regslice_both_x_id_V_U_vld_out, "regslice_both_x_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_x_id_V_U_ack_in, "regslice_both_x_id_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_x_dest_V_U_apdone_blk, "regslice_both_x_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, x_TDEST_int, "x_TDEST_int");
    sc_trace(mVcdFile, regslice_both_x_dest_V_U_vld_out, "regslice_both_x_dest_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_x_dest_V_U_ack_in, "regslice_both_x_dest_V_U_ack_in");
#endif

    }
    mHdltvinHandle.open("max.hdltvin.dat");
    mHdltvoutHandle.open("max.hdltvout.dat");
}

max::~max() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete regslice_both_y_data_V_U;
    delete regslice_both_y_keep_V_U;
    delete regslice_both_y_strb_V_U;
    delete regslice_both_y_user_V_U;
    delete regslice_both_y_last_V_U;
    delete regslice_both_y_id_V_U;
    delete regslice_both_y_dest_V_U;
    delete regslice_both_x_data_V_U;
    delete regslice_both_x_keep_V_U;
    delete regslice_both_x_strb_V_U;
    delete regslice_both_x_user_V_U;
    delete regslice_both_x_last_V_U;
    delete regslice_both_x_id_V_U;
    delete regslice_both_x_dest_V_U;
}

void max::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        max_value = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(icmp_ln887_fu_151_p2.read(), ap_const_lv1_1) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, y_TREADY_int.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_TVALID_int.read())))) {
            max_value = x_TDATA_int.read();
        }
    }
}

void max::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void max::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void max::thread_ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if (esl_seteq<1,1,1>(icmp_ln887_fu_151_p2.read(), ap_const_lv1_0)) {
            ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4 = max_value.read();
        } else if (esl_seteq<1,1,1>(icmp_ln887_fu_151_p2.read(), ap_const_lv1_1)) {
            ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4 = x_TDATA_int.read();
        } else {
            ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4 = "XXXXXXXXXXXXXXXX";
        }
    } else {
        ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4 = "XXXXXXXXXXXXXXXX";
    }
}

void max::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void max::thread_icmp_ln887_fu_151_p2() {
    icmp_ln887_fu_151_p2 = (!max_value.read().is_01() || !x_TDATA_int.read().is_01())? sc_lv<1>(): (sc_bigint<16>(max_value.read()) < sc_bigint<16>(x_TDATA_int.read()));
}

void max::thread_x_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        x_TDATA_blk_n = x_TVALID_int.read();
    } else {
        x_TDATA_blk_n = ap_const_logic_1;
    }
}

void max::thread_x_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, x_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_x_data_V_U_ack_in.read()))) {
        x_TREADY = ap_const_logic_1;
    } else {
        x_TREADY = ap_const_logic_0;
    }
}

void max::thread_x_TREADY_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, y_TREADY_int.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_TVALID_int.read())))) {
        x_TREADY_int = ap_const_logic_1;
    } else {
        x_TREADY_int = ap_const_logic_0;
    }
}

void max::thread_y_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        y_TDATA_blk_n = y_TREADY_int.read();
    } else {
        y_TDATA_blk_n = ap_const_logic_1;
    }
}

void max::thread_y_TVALID() {
    y_TVALID = regslice_both_y_data_V_U_vld_out.read();
}

void max::thread_y_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, y_TREADY_int.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_TVALID_int.read())))) {
        y_TVALID_int = ap_const_logic_1;
    } else {
        y_TVALID_int = ap_const_logic_0;
    }
}

void max::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, y_TREADY_int.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_TVALID_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_y_data_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_TREADY_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void max::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"y_TDATA\" :  \"" << y_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_TVALID\" :  \"" << y_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"y_TREADY\" :  \"" << y_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_TKEEP\" :  \"" << y_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_TSTRB\" :  \"" << y_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_TUSER\" :  \"" << y_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_TLAST\" :  \"" << y_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_TID\" :  \"" << y_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_TDEST\" :  \"" << y_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_TDATA\" :  \"" << x_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_TVALID\" :  \"" << x_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_TREADY\" :  \"" << x_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_TKEEP\" :  \"" << x_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_TSTRB\" :  \"" << x_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_TUSER\" :  \"" << x_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_TLAST\" :  \"" << x_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_TID\" :  \"" << x_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_TDEST\" :  \"" << x_TDEST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

