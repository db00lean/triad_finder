-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    y_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_TVALID : OUT STD_LOGIC;
    y_TREADY : IN STD_LOGIC;
    y_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    y_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    y_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    x_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    x_TVALID : IN STD_LOGIC;
    x_TREADY : OUT STD_LOGIC;
    x_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    x_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    x_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    x_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    x_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    x_TDEST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of max is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.198000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=18,HLS_SYN_LUT=61,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal max_value : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal y_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal x_TDATA_blk_n : STD_LOGIC;
    signal ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln887_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_y_data_V_U_apdone_blk : STD_LOGIC;
    signal y_TVALID_int : STD_LOGIC;
    signal y_TREADY_int : STD_LOGIC;
    signal regslice_both_y_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_data_V_U_apdone_blk : STD_LOGIC;
    signal x_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal x_TVALID_int : STD_LOGIC;
    signal x_TREADY_int : STD_LOGIC;
    signal regslice_both_x_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_keep_V_U_apdone_blk : STD_LOGIC;
    signal x_TKEEP_int : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_x_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_strb_V_U_apdone_blk : STD_LOGIC;
    signal x_TSTRB_int : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_x_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_user_V_U_apdone_blk : STD_LOGIC;
    signal x_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_x_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_last_V_U_apdone_blk : STD_LOGIC;
    signal x_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_x_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_id_V_U_apdone_blk : STD_LOGIC;
    signal x_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_x_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_x_dest_V_U_apdone_blk : STD_LOGIC;
    signal x_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_x_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_x_dest_V_U_ack_in : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_y_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4,
        vld_in => y_TVALID_int,
        ack_in => y_TREADY_int,
        data_out => y_TDATA,
        vld_out => regslice_both_y_data_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_data_V_U_apdone_blk);

    regslice_both_y_keep_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TKEEP_int,
        vld_in => y_TVALID_int,
        ack_in => regslice_both_y_keep_V_U_ack_in_dummy,
        data_out => y_TKEEP,
        vld_out => regslice_both_y_keep_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_keep_V_U_apdone_blk);

    regslice_both_y_strb_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TSTRB_int,
        vld_in => y_TVALID_int,
        ack_in => regslice_both_y_strb_V_U_ack_in_dummy,
        data_out => y_TSTRB,
        vld_out => regslice_both_y_strb_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_strb_V_U_apdone_blk);

    regslice_both_y_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TUSER_int,
        vld_in => y_TVALID_int,
        ack_in => regslice_both_y_user_V_U_ack_in_dummy,
        data_out => y_TUSER,
        vld_out => regslice_both_y_user_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_user_V_U_apdone_blk);

    regslice_both_y_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TLAST_int,
        vld_in => y_TVALID_int,
        ack_in => regslice_both_y_last_V_U_ack_in_dummy,
        data_out => y_TLAST,
        vld_out => regslice_both_y_last_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_last_V_U_apdone_blk);

    regslice_both_y_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TID_int,
        vld_in => y_TVALID_int,
        ack_in => regslice_both_y_id_V_U_ack_in_dummy,
        data_out => y_TID,
        vld_out => regslice_both_y_id_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_id_V_U_apdone_blk);

    regslice_both_y_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TDEST_int,
        vld_in => y_TVALID_int,
        ack_in => regslice_both_y_dest_V_U_ack_in_dummy,
        data_out => y_TDEST,
        vld_out => regslice_both_y_dest_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_dest_V_U_apdone_blk);

    regslice_both_x_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TDATA,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_data_V_U_ack_in,
        data_out => x_TDATA_int,
        vld_out => x_TVALID_int,
        ack_out => x_TREADY_int,
        apdone_blk => regslice_both_x_data_V_U_apdone_blk);

    regslice_both_x_keep_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TKEEP,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_keep_V_U_ack_in,
        data_out => x_TKEEP_int,
        vld_out => regslice_both_x_keep_V_U_vld_out,
        ack_out => x_TREADY_int,
        apdone_blk => regslice_both_x_keep_V_U_apdone_blk);

    regslice_both_x_strb_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TSTRB,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_strb_V_U_ack_in,
        data_out => x_TSTRB_int,
        vld_out => regslice_both_x_strb_V_U_vld_out,
        ack_out => x_TREADY_int,
        apdone_blk => regslice_both_x_strb_V_U_apdone_blk);

    regslice_both_x_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TUSER,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_user_V_U_ack_in,
        data_out => x_TUSER_int,
        vld_out => regslice_both_x_user_V_U_vld_out,
        ack_out => x_TREADY_int,
        apdone_blk => regslice_both_x_user_V_U_apdone_blk);

    regslice_both_x_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TLAST,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_last_V_U_ack_in,
        data_out => x_TLAST_int,
        vld_out => regslice_both_x_last_V_U_vld_out,
        ack_out => x_TREADY_int,
        apdone_blk => regslice_both_x_last_V_U_apdone_blk);

    regslice_both_x_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TID,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_id_V_U_ack_in,
        data_out => x_TID_int,
        vld_out => regslice_both_x_id_V_U_vld_out,
        ack_out => x_TREADY_int,
        apdone_blk => regslice_both_x_id_V_U_apdone_blk);

    regslice_both_x_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TDEST,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_dest_V_U_ack_in,
        data_out => x_TDEST_int,
        vld_out => regslice_both_x_dest_V_U_vld_out,
        ack_out => x_TREADY_int,
        apdone_blk => regslice_both_x_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    max_value_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                max_value <= ap_const_lv16_0;
            else
                if ((not(((x_TVALID_int = ap_const_logic_0) or (y_TREADY_int = ap_const_logic_0))) and (icmp_ln887_fu_151_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    max_value <= x_TDATA_int;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, regslice_both_y_data_V_U_apdone_blk, y_TREADY_int, x_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((x_TVALID_int = ap_const_logic_0) or (y_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((y_TREADY_int = ap_const_logic_0) or (regslice_both_y_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4_assign_proc : process(max_value, ap_CS_fsm_state1, icmp_ln887_fu_151_p2, x_TDATA_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((icmp_ln887_fu_151_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4 <= max_value;
            elsif ((icmp_ln887_fu_151_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4 <= x_TDATA_int;
            else 
                ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_y_data_V_tmp_0_phi_fu_103_p4 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    icmp_ln887_fu_151_p2 <= "1" when (signed(max_value) < signed(x_TDATA_int)) else "0";

    x_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, x_TVALID_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            x_TDATA_blk_n <= x_TVALID_int;
        else 
            x_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_TREADY_assign_proc : process(x_TVALID, regslice_both_x_data_V_U_ack_in)
    begin
        if (((regslice_both_x_data_V_U_ack_in = ap_const_logic_1) and (x_TVALID = ap_const_logic_1))) then 
            x_TREADY <= ap_const_logic_1;
        else 
            x_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    x_TREADY_int_assign_proc : process(ap_CS_fsm_state1, y_TREADY_int, x_TVALID_int)
    begin
        if ((not(((x_TVALID_int = ap_const_logic_0) or (y_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_TREADY_int <= ap_const_logic_1;
        else 
            x_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    y_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, y_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_TDATA_blk_n <= y_TREADY_int;
        else 
            y_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_TVALID <= regslice_both_y_data_V_U_vld_out;

    y_TVALID_int_assign_proc : process(ap_CS_fsm_state1, y_TREADY_int, x_TVALID_int)
    begin
        if ((not(((x_TVALID_int = ap_const_logic_0) or (y_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_TVALID_int <= ap_const_logic_1;
        else 
            y_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

end behav;
