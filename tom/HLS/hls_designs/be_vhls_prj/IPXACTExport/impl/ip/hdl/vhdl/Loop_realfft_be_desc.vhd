-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_realfft_be_desc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dout_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dout_V_TVALID : OUT STD_LOGIC;
    dout_V_TREADY : IN STD_LOGIC;
    descramble_buf_0_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_0_M_imag_V_ce0 : OUT STD_LOGIC;
    descramble_buf_0_M_imag_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    descramble_buf_0_M_imag_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_0_M_imag_V_ce1 : OUT STD_LOGIC;
    descramble_buf_0_M_imag_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    descramble_buf_1_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_1_M_imag_V_ce0 : OUT STD_LOGIC;
    descramble_buf_1_M_imag_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    descramble_buf_1_M_imag_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_1_M_imag_V_ce1 : OUT STD_LOGIC;
    descramble_buf_1_M_imag_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    descramble_buf_0_M_real_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_0_M_real_V_ce0 : OUT STD_LOGIC;
    descramble_buf_0_M_real_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    descramble_buf_0_M_real_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_0_M_real_V_ce1 : OUT STD_LOGIC;
    descramble_buf_0_M_real_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    descramble_buf_1_M_real_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_1_M_real_V_ce0 : OUT STD_LOGIC;
    descramble_buf_1_M_real_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    descramble_buf_1_M_real_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_1_M_real_V_ce1 : OUT STD_LOGIC;
    descramble_buf_1_M_real_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Loop_realfft_be_desc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal twid_rom_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal twid_rom_0_ce0 : STD_LOGIC;
    signal twid_rom_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal twid_rom_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal twid_rom_1_ce0 : STD_LOGIC;
    signal twid_rom_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dout_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln80_reg_658 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_658_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal icmp_ln80_reg_658_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_0_i_reg_217 : STD_LOGIC_VECTOR (9 downto 0);
    signal i1_0_i_reg_217_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i1_0_i_reg_217_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i1_0_i_reg_217_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln80_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_658_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_658_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_658_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_658_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_658_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_658_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_658_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_658_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_658_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_253_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_662 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln101_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_667 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_667_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_667_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_667_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_667_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_667_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_667_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_667_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_667_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_667_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_667_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln104_fu_271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln104_reg_671 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_676_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_676_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_676_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln104_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_682 : STD_LOGIC_VECTOR (63 downto 0);
    signal descramble_buf_0_M_7_reg_728 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal descramble_buf_1_M_7_reg_733 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln99_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_738 : STD_LOGIC_VECTOR (0 downto 0);
    signal descramble_buf_0_M_1_reg_744 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal descramble_buf_1_M_1_reg_749 : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_0_M_3_reg_754 : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_1_M_3_reg_759 : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_0_M_6_reg_764 : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_1_M_6_reg_769 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_fu_321_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_reg_774 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_333_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_779 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_779_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_779_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_779_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_779_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_fu_338_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_reg_785 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_reg_785_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_reg_785_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_reg_785_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_reg_785_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_359_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_reg_791 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_reg_791_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_reg_791_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_reg_791_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_reg_791_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_reg_791_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_fu_365_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_reg_798 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_375_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_reg_803 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_reg_803_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_reg_803_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_reg_803_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_reg_803_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_reg_803_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_2_fu_381_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_2_reg_810 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln1148_7_reg_815 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_820 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_820_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1148_3_reg_825 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1148_3_reg_825_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1148_fu_446_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1148_reg_840 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1148_s_reg_845 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_14_reg_850 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_15_reg_855 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1148_2_fu_475_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1148_2_reg_860 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_fu_481_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1118_reg_865 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1118_1_fu_484_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1118_2_fu_487_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1118_2_reg_877 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1118_3_fu_490_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1148_1_reg_889 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1148_4_reg_894 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_634_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln700_reg_899 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_640_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1192_reg_904 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln1148_1_fu_531_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1148_1_reg_909 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1148_3_fu_536_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1148_3_reg_914 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_646_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_4_reg_919 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal grp_fu_652_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_5_reg_924 : STD_LOGIC_VECTOR (30 downto 0);
    signal cdata_M_real_V_fu_541_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cdata_M_real_V_reg_929 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln703_fu_545_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln703_reg_934 : STD_LOGIC_VECTOR (15 downto 0);
    signal cdata_M_real_V_1_fu_613_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cdata_M_real_V_1_reg_939 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1_fu_619_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1_reg_944 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_phi_mux_i1_0_i_phi_fu_221_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_tmp_M_real_V_phi_fu_232_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_M_real_V_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_M_real_V_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_M_real_V_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_M_real_V_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter4_tmp_M_real_V_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter5_tmp_M_real_V_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter6_tmp_M_real_V_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter7_tmp_M_real_V_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter8_tmp_M_real_V_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter9_tmp_M_real_V_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter10_tmp_M_real_V_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter11_tmp_M_real_V_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_cdata_M_imag_V_phi_fu_241_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_cdata_M_imag_V_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_cdata_M_imag_V_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter2_cdata_M_imag_V_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter3_cdata_M_imag_V_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter4_cdata_M_imag_V_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter5_cdata_M_imag_V_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter6_cdata_M_imag_V_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter7_cdata_M_imag_V_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter8_cdata_M_imag_V_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter9_cdata_M_imag_V_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter10_cdata_M_imag_V_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter11_cdata_M_imag_V_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln99_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1265_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sub_ln104_fu_265_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln99_fu_288_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_300_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_2_fu_316_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_fu_343_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_fu_355_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_fu_348_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_4_fu_371_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_3_fu_352_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_fu_418_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_423_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1148_4_fu_431_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1148_8_fu_436_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1148_2_fu_415_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1148_5_fu_454_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1148_6_fu_470_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1148_fu_493_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1148_fu_496_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln1148_1_fu_512_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1148_2_fu_515_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_fu_549_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1148_2_fu_556_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_572_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1148_5_fu_579_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_M_real_V_fu_565_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_V_fu_595_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_M_imag_V_fu_588_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_13_fu_604_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_634_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_640_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_646_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_646_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_652_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_652_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_634_ce : STD_LOGIC;
    signal grp_fu_640_ce : STD_LOGIC;
    signal grp_fu_646_ce : STD_LOGIC;
    signal grp_fu_652_ce : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal regslice_both_dout_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal dout_V_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal dout_V_TVALID_int : STD_LOGIC;
    signal dout_V_TREADY_int : STD_LOGIC;
    signal regslice_both_dout_V_U_vld_out : STD_LOGIC;

    component hls_xfft2real_muldEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component hls_xfft2real_maceOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component hls_xfft2real_macfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Loop_realfft_be_dbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Loop_realfft_be_dcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    twid_rom_0_U : component Loop_realfft_be_dbkb
    generic map (
        DataWidth => 16,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => twid_rom_0_address0,
        ce0 => twid_rom_0_ce0,
        q0 => twid_rom_0_q0);

    twid_rom_1_U : component Loop_realfft_be_dcud
    generic map (
        DataWidth => 16,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => twid_rom_1_address0,
        ce0 => twid_rom_1_ce0,
        q0 => twid_rom_1_q0);

    hls_xfft2real_muldEe_U8 : component hls_xfft2real_muldEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_Val2_14_reg_850,
        din1 => grp_fu_634_p1,
        ce => grp_fu_634_ce,
        dout => grp_fu_634_p2);

    hls_xfft2real_muldEe_U9 : component hls_xfft2real_muldEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_640_p0,
        din1 => p_Val2_15_reg_855,
        ce => grp_fu_640_ce,
        dout => grp_fu_640_p2);

    hls_xfft2real_maceOg_U10 : component hls_xfft2real_maceOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_646_p0,
        din1 => grp_fu_646_p1,
        din2 => mul_ln700_reg_899,
        ce => grp_fu_646_ce,
        dout => grp_fu_646_p3);

    hls_xfft2real_macfYi_U11 : component hls_xfft2real_macfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_652_p0,
        din1 => grp_fu_652_p1,
        din2 => mul_ln1192_reg_904,
        ce => grp_fu_652_ce,
        dout => grp_fu_652_p3);

    regslice_both_dout_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => dout_V_TDATA_int,
        vld_in => dout_V_TVALID_int,
        ack_in => dout_V_TREADY_int,
        data_out => dout_V_TDATA,
        vld_out => regslice_both_dout_V_U_vld_out,
        ack_out => dout_V_TREADY,
        apdone_blk => regslice_both_dout_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((regslice_both_dout_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter11_cdata_M_imag_V_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln80_reg_658_pp0_iter9_reg = ap_const_lv1_0) and (icmp_ln101_reg_667_pp0_iter9_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter11_cdata_M_imag_V_reg_238 <= sub_ln703_reg_934;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter11_cdata_M_imag_V_reg_238 <= ap_phi_reg_pp0_iter10_cdata_M_imag_V_reg_238;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter11_tmp_M_real_V_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln80_reg_658_pp0_iter9_reg = ap_const_lv1_0) and (icmp_ln101_reg_667_pp0_iter9_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter11_tmp_M_real_V_reg_229 <= cdata_M_real_V_reg_929;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter11_tmp_M_real_V_reg_229 <= ap_phi_reg_pp0_iter10_tmp_M_real_V_reg_229;
                end if;
            end if; 
        end if;
    end process;

    i1_0_i_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i1_0_i_reg_217 <= ap_const_lv10_0;
            elsif (((icmp_ln80_reg_658 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i1_0_i_reg_217 <= i_reg_662;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_667_pp0_iter9_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln703_1_reg_944 <= add_ln703_1_fu_619_p2;
                cdata_M_real_V_1_reg_939 <= cdata_M_real_V_1_fu_613_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_cdata_M_imag_V_reg_238 <= ap_phi_reg_pp0_iter9_cdata_M_imag_V_reg_238;
                ap_phi_reg_pp0_iter10_tmp_M_real_V_reg_229 <= ap_phi_reg_pp0_iter9_tmp_M_real_V_reg_229;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_cdata_M_imag_V_reg_238 <= ap_phi_reg_pp0_iter0_cdata_M_imag_V_reg_238;
                ap_phi_reg_pp0_iter1_tmp_M_real_V_reg_229 <= ap_phi_reg_pp0_iter0_tmp_M_real_V_reg_229;
                i_reg_662 <= i_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_cdata_M_imag_V_reg_238 <= ap_phi_reg_pp0_iter1_cdata_M_imag_V_reg_238;
                ap_phi_reg_pp0_iter2_tmp_M_real_V_reg_229 <= ap_phi_reg_pp0_iter1_tmp_M_real_V_reg_229;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_cdata_M_imag_V_reg_238 <= ap_phi_reg_pp0_iter2_cdata_M_imag_V_reg_238;
                ap_phi_reg_pp0_iter3_tmp_M_real_V_reg_229 <= ap_phi_reg_pp0_iter2_tmp_M_real_V_reg_229;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_cdata_M_imag_V_reg_238 <= ap_phi_reg_pp0_iter3_cdata_M_imag_V_reg_238;
                ap_phi_reg_pp0_iter4_tmp_M_real_V_reg_229 <= ap_phi_reg_pp0_iter3_tmp_M_real_V_reg_229;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_cdata_M_imag_V_reg_238 <= ap_phi_reg_pp0_iter4_cdata_M_imag_V_reg_238;
                ap_phi_reg_pp0_iter5_tmp_M_real_V_reg_229 <= ap_phi_reg_pp0_iter4_tmp_M_real_V_reg_229;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_cdata_M_imag_V_reg_238 <= ap_phi_reg_pp0_iter5_cdata_M_imag_V_reg_238;
                ap_phi_reg_pp0_iter6_tmp_M_real_V_reg_229 <= ap_phi_reg_pp0_iter5_tmp_M_real_V_reg_229;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_cdata_M_imag_V_reg_238 <= ap_phi_reg_pp0_iter6_cdata_M_imag_V_reg_238;
                ap_phi_reg_pp0_iter7_tmp_M_real_V_reg_229 <= ap_phi_reg_pp0_iter6_tmp_M_real_V_reg_229;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_cdata_M_imag_V_reg_238 <= ap_phi_reg_pp0_iter7_cdata_M_imag_V_reg_238;
                ap_phi_reg_pp0_iter8_tmp_M_real_V_reg_229 <= ap_phi_reg_pp0_iter7_tmp_M_real_V_reg_229;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_cdata_M_imag_V_reg_238 <= ap_phi_reg_pp0_iter8_cdata_M_imag_V_reg_238;
                ap_phi_reg_pp0_iter9_tmp_M_real_V_reg_229 <= ap_phi_reg_pp0_iter8_tmp_M_real_V_reg_229;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_658_pp0_iter8_reg = ap_const_lv1_0) and (icmp_ln101_reg_667_pp0_iter8_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cdata_M_real_V_reg_929 <= cdata_M_real_V_fu_541_p2;
                sub_ln703_reg_934 <= sub_ln703_fu_545_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_658_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                descramble_buf_0_M_1_reg_744 <= descramble_buf_0_M_real_V_q0;
                descramble_buf_0_M_3_reg_754 <= descramble_buf_0_M_imag_V_q1;
                descramble_buf_1_M_1_reg_749 <= descramble_buf_1_M_real_V_q0;
                descramble_buf_1_M_3_reg_759 <= descramble_buf_1_M_imag_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_676_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_667_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                descramble_buf_0_M_6_reg_764 <= descramble_buf_0_M_real_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_676_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln101_reg_667_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                descramble_buf_0_M_7_reg_728 <= descramble_buf_0_M_imag_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_667_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (tmp_3_reg_676_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                descramble_buf_1_M_6_reg_769 <= descramble_buf_1_M_real_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_667_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_3_reg_676_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                descramble_buf_1_M_7_reg_733 <= descramble_buf_1_M_imag_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i1_0_i_reg_217_pp0_iter1_reg <= i1_0_i_reg_217;
                icmp_ln101_reg_667_pp0_iter1_reg <= icmp_ln101_reg_667;
                icmp_ln80_reg_658 <= icmp_ln80_fu_247_p2;
                icmp_ln80_reg_658_pp0_iter1_reg <= icmp_ln80_reg_658;
                tmp_3_reg_676_pp0_iter1_reg <= tmp_3_reg_676;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                i1_0_i_reg_217_pp0_iter2_reg <= i1_0_i_reg_217_pp0_iter1_reg;
                i1_0_i_reg_217_pp0_iter3_reg <= i1_0_i_reg_217_pp0_iter2_reg;
                icmp_ln101_reg_667_pp0_iter10_reg <= icmp_ln101_reg_667_pp0_iter9_reg;
                icmp_ln101_reg_667_pp0_iter2_reg <= icmp_ln101_reg_667_pp0_iter1_reg;
                icmp_ln101_reg_667_pp0_iter3_reg <= icmp_ln101_reg_667_pp0_iter2_reg;
                icmp_ln101_reg_667_pp0_iter4_reg <= icmp_ln101_reg_667_pp0_iter3_reg;
                icmp_ln101_reg_667_pp0_iter5_reg <= icmp_ln101_reg_667_pp0_iter4_reg;
                icmp_ln101_reg_667_pp0_iter6_reg <= icmp_ln101_reg_667_pp0_iter5_reg;
                icmp_ln101_reg_667_pp0_iter7_reg <= icmp_ln101_reg_667_pp0_iter6_reg;
                icmp_ln101_reg_667_pp0_iter8_reg <= icmp_ln101_reg_667_pp0_iter7_reg;
                icmp_ln101_reg_667_pp0_iter9_reg <= icmp_ln101_reg_667_pp0_iter8_reg;
                icmp_ln80_reg_658_pp0_iter10_reg <= icmp_ln80_reg_658_pp0_iter9_reg;
                icmp_ln80_reg_658_pp0_iter11_reg <= icmp_ln80_reg_658_pp0_iter10_reg;
                icmp_ln80_reg_658_pp0_iter2_reg <= icmp_ln80_reg_658_pp0_iter1_reg;
                icmp_ln80_reg_658_pp0_iter3_reg <= icmp_ln80_reg_658_pp0_iter2_reg;
                icmp_ln80_reg_658_pp0_iter4_reg <= icmp_ln80_reg_658_pp0_iter3_reg;
                icmp_ln80_reg_658_pp0_iter5_reg <= icmp_ln80_reg_658_pp0_iter4_reg;
                icmp_ln80_reg_658_pp0_iter6_reg <= icmp_ln80_reg_658_pp0_iter5_reg;
                icmp_ln80_reg_658_pp0_iter7_reg <= icmp_ln80_reg_658_pp0_iter6_reg;
                icmp_ln80_reg_658_pp0_iter8_reg <= icmp_ln80_reg_658_pp0_iter7_reg;
                icmp_ln80_reg_658_pp0_iter9_reg <= icmp_ln80_reg_658_pp0_iter8_reg;
                p_Val2_1_reg_785_pp0_iter5_reg <= p_Val2_1_reg_785;
                p_Val2_1_reg_785_pp0_iter6_reg <= p_Val2_1_reg_785_pp0_iter5_reg;
                p_Val2_1_reg_785_pp0_iter7_reg <= p_Val2_1_reg_785_pp0_iter6_reg;
                p_Val2_1_reg_785_pp0_iter8_reg <= p_Val2_1_reg_785_pp0_iter7_reg;
                p_Val2_s_reg_779_pp0_iter5_reg <= p_Val2_s_reg_779;
                p_Val2_s_reg_779_pp0_iter6_reg <= p_Val2_s_reg_779_pp0_iter5_reg;
                p_Val2_s_reg_779_pp0_iter7_reg <= p_Val2_s_reg_779_pp0_iter6_reg;
                p_Val2_s_reg_779_pp0_iter8_reg <= p_Val2_s_reg_779_pp0_iter7_reg;
                ret_V_1_reg_803_pp0_iter5_reg <= ret_V_1_reg_803;
                ret_V_1_reg_803_pp0_iter6_reg <= ret_V_1_reg_803_pp0_iter5_reg;
                ret_V_1_reg_803_pp0_iter7_reg <= ret_V_1_reg_803_pp0_iter6_reg;
                ret_V_1_reg_803_pp0_iter8_reg <= ret_V_1_reg_803_pp0_iter7_reg;
                ret_V_1_reg_803_pp0_iter9_reg <= ret_V_1_reg_803_pp0_iter8_reg;
                ret_V_reg_791_pp0_iter5_reg <= ret_V_reg_791;
                ret_V_reg_791_pp0_iter6_reg <= ret_V_reg_791_pp0_iter5_reg;
                ret_V_reg_791_pp0_iter7_reg <= ret_V_reg_791_pp0_iter6_reg;
                ret_V_reg_791_pp0_iter8_reg <= ret_V_reg_791_pp0_iter7_reg;
                ret_V_reg_791_pp0_iter9_reg <= ret_V_reg_791_pp0_iter8_reg;
                tmp_3_reg_676_pp0_iter2_reg <= tmp_3_reg_676_pp0_iter1_reg;
                tmp_3_reg_676_pp0_iter3_reg <= tmp_3_reg_676_pp0_iter2_reg;
                tmp_7_reg_820_pp0_iter5_reg <= tmp_7_reg_820;
                trunc_ln1148_3_reg_825_pp0_iter5_reg <= trunc_ln1148_3_reg_825;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln101_reg_667 <= icmp_ln101_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_658_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln99_reg_738 <= icmp_ln99_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_667_pp0_iter7_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln1192_reg_904 <= grp_fu_640_p2;
                mul_ln700_reg_899 <= grp_fu_634_p2;
                trunc_ln1148_1_reg_889 <= sub_ln1148_fu_496_p2(16 downto 1);
                trunc_ln1148_4_reg_894 <= sub_ln1148_2_fu_515_p2(16 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_667_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_14_reg_850 <= twid_rom_0_q0;
                p_Val2_15_reg_855 <= twid_rom_1_q0;
                select_ln1148_reg_840 <= select_ln1148_fu_446_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_658_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_1_reg_785 <= p_Val2_1_fu_338_p3;
                p_Val2_s_reg_779 <= p_Val2_s_fu_333_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_667_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_4_reg_774 <= p_Val2_4_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_667_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ret_V_1_reg_803 <= ret_V_1_fu_375_p2;
                ret_V_2_reg_810 <= ret_V_2_fu_381_p2;
                ret_V_3_reg_798 <= ret_V_3_fu_365_p2;
                ret_V_reg_791 <= ret_V_fu_359_p2;
                tmp_7_reg_820 <= ret_V_3_fu_365_p2(16 downto 16);
                trunc_ln1148_3_reg_825 <= ret_V_3_fu_365_p2(16 downto 1);
                trunc_ln1148_7_reg_815 <= ret_V_2_fu_381_p2(16 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_667_pp0_iter8_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ret_V_4_reg_919 <= grp_fu_646_p3;
                ret_V_5_reg_924 <= grp_fu_652_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_667_pp0_iter5_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln1148_2_reg_860 <= select_ln1148_2_fu_475_p3;
                sext_ln1118_2_reg_877 <= sext_ln1118_2_fu_487_p1;
                sext_ln1118_reg_865 <= sext_ln1118_fu_481_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_667_pp0_iter8_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub_ln1148_1_reg_909 <= sub_ln1148_1_fu_531_p2;
                sub_ln1148_3_reg_914 <= sub_ln1148_3_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_fu_259_p2 = ap_const_lv1_0) and (icmp_ln80_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_3_reg_676 <= sub_ln104_fu_265_p2(8 downto 8);
                trunc_ln104_reg_671 <= trunc_ln104_fu_271_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_667_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter4_reg = ap_const_lv1_0) and (tmp_7_reg_820 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln1148_s_reg_845 <= sub_ln1148_5_fu_454_p2(16 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_667 = ap_const_lv1_0) and (icmp_ln80_reg_658 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln104_reg_682(7 downto 0) <= zext_ln104_fu_283_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln104_reg_682(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, icmp_ln80_fu_247_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_CS_fsm_state15, regslice_both_dout_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln80_fu_247_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln80_fu_247_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                if (((regslice_both_dout_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln703_1_fu_619_p2 <= std_logic_vector(unsigned(f_M_imag_V_fu_588_p3) + unsigned(p_Val2_13_fu_604_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_block_state13_io, ap_block_state14_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state14_io) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state13_io) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_block_state13_io, ap_block_state14_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state14_io) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state13_io) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_io_assign_proc : process(icmp_ln80_reg_658_pp0_iter10_reg, dout_V_TREADY_int)
    begin
                ap_block_state13_io <= ((icmp_ln80_reg_658_pp0_iter10_reg = ap_const_lv1_0) and (dout_V_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_io_assign_proc : process(icmp_ln80_reg_658_pp0_iter11_reg, dout_V_TREADY_int)
    begin
                ap_block_state14_io <= ((icmp_ln80_reg_658_pp0_iter11_reg = ap_const_lv1_0) and (dout_V_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln80_fu_247_p2)
    begin
        if ((icmp_ln80_fu_247_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state15, regslice_both_dout_V_U_apdone_blk)
    begin
        if (((regslice_both_dout_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cdata_M_imag_V_phi_fu_241_p4_assign_proc : process(icmp_ln80_reg_658_pp0_iter10_reg, icmp_ln101_reg_667_pp0_iter10_reg, add_ln703_1_reg_944, ap_phi_reg_pp0_iter11_cdata_M_imag_V_reg_238)
    begin
        if (((icmp_ln101_reg_667_pp0_iter10_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter10_reg = ap_const_lv1_0))) then 
            ap_phi_mux_cdata_M_imag_V_phi_fu_241_p4 <= add_ln703_1_reg_944;
        else 
            ap_phi_mux_cdata_M_imag_V_phi_fu_241_p4 <= ap_phi_reg_pp0_iter11_cdata_M_imag_V_reg_238;
        end if; 
    end process;


    ap_phi_mux_i1_0_i_phi_fu_221_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln80_reg_658, i1_0_i_reg_217, ap_CS_fsm_pp0_stage0, i_reg_662, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln80_reg_658 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i1_0_i_phi_fu_221_p4 <= i_reg_662;
        else 
            ap_phi_mux_i1_0_i_phi_fu_221_p4 <= i1_0_i_reg_217;
        end if; 
    end process;


    ap_phi_mux_tmp_M_real_V_phi_fu_232_p4_assign_proc : process(icmp_ln80_reg_658_pp0_iter10_reg, icmp_ln101_reg_667_pp0_iter10_reg, cdata_M_real_V_1_reg_939, ap_phi_reg_pp0_iter11_tmp_M_real_V_reg_229)
    begin
        if (((icmp_ln101_reg_667_pp0_iter10_reg = ap_const_lv1_0) and (icmp_ln80_reg_658_pp0_iter10_reg = ap_const_lv1_0))) then 
            ap_phi_mux_tmp_M_real_V_phi_fu_232_p4 <= cdata_M_real_V_1_reg_939;
        else 
            ap_phi_mux_tmp_M_real_V_phi_fu_232_p4 <= ap_phi_reg_pp0_iter11_tmp_M_real_V_reg_229;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_cdata_M_imag_V_reg_238 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_tmp_M_real_V_reg_229 <= "XXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state15, regslice_both_dout_V_U_apdone_blk)
    begin
        if (((regslice_both_dout_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cdata_M_real_V_1_fu_613_p2 <= std_logic_vector(unsigned(f_M_real_V_fu_565_p3) + unsigned(p_r_V_fu_595_p4));
    cdata_M_real_V_fu_541_p2 <= std_logic_vector(signed(p_Val2_1_reg_785_pp0_iter8_reg) + signed(p_Val2_s_reg_779_pp0_iter8_reg));
    descramble_buf_0_M_imag_V_address0 <= zext_ln104_fu_283_p1(8 - 1 downto 0);
    descramble_buf_0_M_imag_V_address1 <= zext_ln99_fu_292_p1(8 - 1 downto 0);

    descramble_buf_0_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            descramble_buf_0_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_0_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    descramble_buf_0_M_imag_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            descramble_buf_0_M_imag_V_ce1 <= ap_const_logic_1;
        else 
            descramble_buf_0_M_imag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_0_M_real_V_address0 <= zext_ln99_fu_292_p1(8 - 1 downto 0);
    descramble_buf_0_M_real_V_address1 <= zext_ln104_reg_682(8 - 1 downto 0);

    descramble_buf_0_M_real_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            descramble_buf_0_M_real_V_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_0_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    descramble_buf_0_M_real_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            descramble_buf_0_M_real_V_ce1 <= ap_const_logic_1;
        else 
            descramble_buf_0_M_real_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_1_M_imag_V_address0 <= zext_ln104_fu_283_p1(8 - 1 downto 0);
    descramble_buf_1_M_imag_V_address1 <= zext_ln99_fu_292_p1(8 - 1 downto 0);

    descramble_buf_1_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            descramble_buf_1_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_1_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    descramble_buf_1_M_imag_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            descramble_buf_1_M_imag_V_ce1 <= ap_const_logic_1;
        else 
            descramble_buf_1_M_imag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_1_M_real_V_address0 <= zext_ln99_fu_292_p1(8 - 1 downto 0);
    descramble_buf_1_M_real_V_address1 <= zext_ln104_reg_682(8 - 1 downto 0);

    descramble_buf_1_M_real_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            descramble_buf_1_M_real_V_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_1_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    descramble_buf_1_M_real_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            descramble_buf_1_M_real_V_ce1 <= ap_const_logic_1;
        else 
            descramble_buf_1_M_real_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dout_V_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0, icmp_ln80_reg_658_pp0_iter10_reg, ap_enable_reg_pp0_iter12, icmp_ln80_reg_658_pp0_iter11_reg, dout_V_TREADY_int)
    begin
        if ((((icmp_ln80_reg_658_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((icmp_ln80_reg_658_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)))) then 
            dout_V_TDATA_blk_n <= dout_V_TREADY_int;
        else 
            dout_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_V_TDATA_int <= (ap_phi_mux_cdata_M_imag_V_phi_fu_241_p4 & ap_phi_mux_tmp_M_real_V_phi_fu_232_p4);
    dout_V_TVALID <= regslice_both_dout_V_U_vld_out;

    dout_V_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter11, icmp_ln80_reg_658_pp0_iter10_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln80_reg_658_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dout_V_TVALID_int <= ap_const_logic_1;
        else 
            dout_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    f_M_imag_V_fu_588_p3 <= 
        sub_ln1148_3_reg_914 when (tmp_5_fu_572_p3(0) = '1') else 
        trunc_ln1148_5_fu_579_p4;
    f_M_real_V_fu_565_p3 <= 
        sub_ln1148_1_reg_909 when (tmp_4_fu_549_p3(0) = '1') else 
        trunc_ln1148_2_fu_556_p4;

    grp_fu_634_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_634_ce <= ap_const_logic_1;
        else 
            grp_fu_634_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_634_p1 <= sext_ln1118_1_fu_484_p1(16 - 1 downto 0);

    grp_fu_640_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_640_ce <= ap_const_logic_1;
        else 
            grp_fu_640_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_640_p0 <= sext_ln1118_1_fu_484_p1(16 - 1 downto 0);

    grp_fu_646_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_646_ce <= ap_const_logic_1;
        else 
            grp_fu_646_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_646_p0 <= sext_ln1118_2_reg_877(16 - 1 downto 0);
    grp_fu_646_p1 <= sext_ln1118_3_fu_490_p1(16 - 1 downto 0);

    grp_fu_652_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_652_ce <= ap_const_logic_1;
        else 
            grp_fu_652_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_652_p0 <= sext_ln1118_reg_865(16 - 1 downto 0);
    grp_fu_652_p1 <= sext_ln1118_3_fu_490_p1(16 - 1 downto 0);
    i_fu_253_p2 <= std_logic_vector(unsigned(ap_phi_mux_i1_0_i_phi_fu_221_p4) + unsigned(ap_const_lv10_1));
    icmp_ln101_fu_259_p2 <= "1" when (ap_phi_mux_i1_0_i_phi_fu_221_p4 = ap_const_lv10_0) else "0";
    icmp_ln80_fu_247_p2 <= "1" when (ap_phi_mux_i1_0_i_phi_fu_221_p4 = ap_const_lv10_200) else "0";
    icmp_ln99_fu_310_p2 <= "1" when (tmp_fu_300_p4 = ap_const_lv2_0) else "0";
        lhs_V_4_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_fu_338_p3),17));

        lhs_V_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_333_p3),17));

    p_Val2_13_fu_604_p4 <= ret_V_5_reg_924(30 downto 15);
    p_Val2_1_fu_338_p3 <= 
        descramble_buf_0_M_3_reg_754 when (icmp_ln99_reg_738(0) = '1') else 
        descramble_buf_1_M_3_reg_759;
    p_Val2_2_fu_316_p3 <= 
        descramble_buf_1_M_7_reg_733 when (tmp_3_reg_676_pp0_iter2_reg(0) = '1') else 
        descramble_buf_0_M_7_reg_728;
    p_Val2_3_fu_343_p3 <= 
        descramble_buf_1_M_6_reg_769 when (tmp_3_reg_676_pp0_iter3_reg(0) = '1') else 
        descramble_buf_0_M_6_reg_764;
    p_Val2_4_fu_321_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_Val2_2_fu_316_p3));
    p_Val2_s_fu_333_p3 <= 
        descramble_buf_0_M_1_reg_744 when (icmp_ln99_reg_738(0) = '1') else 
        descramble_buf_1_M_1_reg_749;
    p_r_V_fu_595_p4 <= ret_V_4_reg_919(30 downto 15);
    r_V_fu_418_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(ret_V_2_reg_810));
    ret_V_1_fu_375_p2 <= std_logic_vector(signed(lhs_V_4_fu_371_p1) + signed(rhs_V_3_fu_352_p1));
    ret_V_2_fu_381_p2 <= std_logic_vector(signed(rhs_V_3_fu_352_p1) - signed(lhs_V_4_fu_371_p1));
    ret_V_3_fu_365_p2 <= std_logic_vector(signed(rhs_V_fu_348_p1) - signed(lhs_V_fu_355_p1));
    ret_V_fu_359_p2 <= std_logic_vector(signed(lhs_V_fu_355_p1) + signed(rhs_V_fu_348_p1));
        rhs_V_3_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_774),17));

        rhs_V_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_3_fu_343_p3),17));

    select_ln1148_2_fu_475_p3 <= 
        sub_ln1148_6_fu_470_p2 when (tmp_7_reg_820_pp0_iter5_reg(0) = '1') else 
        trunc_ln1148_3_reg_825_pp0_iter5_reg;
    select_ln1148_fu_446_p3 <= 
        sub_ln1148_4_fu_431_p2 when (tmp_6_fu_423_p3(0) = '1') else 
        trunc_ln1148_8_fu_436_p4;
        sext_ln1118_1_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1148_reg_840),31));

        sext_ln1118_2_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_15_reg_855),31));

        sext_ln1118_3_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1148_2_reg_860),31));

        sext_ln1118_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_14_reg_850),31));

    sub_ln104_fu_265_p2 <= std_logic_vector(signed(ap_const_lv10_200) - signed(ap_phi_mux_i1_0_i_phi_fu_221_p4));
    sub_ln1148_1_fu_531_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln1148_1_reg_889));
    sub_ln1148_2_fu_515_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(zext_ln1148_1_fu_512_p1));
    sub_ln1148_3_fu_536_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln1148_4_reg_894));
    sub_ln1148_4_fu_431_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln1148_7_reg_815));
    sub_ln1148_5_fu_454_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(zext_ln1148_2_fu_415_p1));
    sub_ln1148_6_fu_470_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln1148_s_reg_845));
    sub_ln1148_fu_496_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(zext_ln1148_fu_493_p1));
    sub_ln703_fu_545_p2 <= std_logic_vector(signed(p_Val2_s_reg_779_pp0_iter8_reg) - signed(p_Val2_1_reg_785_pp0_iter8_reg));
    tmp_4_fu_549_p3 <= ret_V_reg_791_pp0_iter9_reg(16 downto 16);
    tmp_5_fu_572_p3 <= ret_V_1_reg_803_pp0_iter9_reg(16 downto 16);
    tmp_6_fu_423_p3 <= r_V_fu_418_p2(16 downto 16);
    tmp_fu_300_p4 <= i1_0_i_reg_217_pp0_iter2_reg(9 downto 8);
    trunc_ln104_fu_271_p1 <= sub_ln104_fu_265_p2(8 - 1 downto 0);
    trunc_ln1148_2_fu_556_p4 <= ret_V_reg_791_pp0_iter9_reg(16 downto 1);
    trunc_ln1148_5_fu_579_p4 <= ret_V_1_reg_803_pp0_iter9_reg(16 downto 1);
    trunc_ln1148_8_fu_436_p4 <= r_V_fu_418_p2(16 downto 1);
    trunc_ln99_fu_288_p1 <= i1_0_i_reg_217_pp0_iter1_reg(8 - 1 downto 0);
    twid_rom_0_address0 <= zext_ln1265_fu_327_p1(9 - 1 downto 0);

    twid_rom_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            twid_rom_0_ce0 <= ap_const_logic_1;
        else 
            twid_rom_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    twid_rom_1_address0 <= zext_ln1265_fu_327_p1(9 - 1 downto 0);

    twid_rom_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            twid_rom_1_ce0 <= ap_const_logic_1;
        else 
            twid_rom_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln104_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln104_reg_671),64));
    zext_ln1148_1_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_reg_803_pp0_iter7_reg),18));
    zext_ln1148_2_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_3_reg_798),18));
    zext_ln1148_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_791_pp0_iter7_reg),18));
    zext_ln1265_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_i_reg_217_pp0_iter3_reg),64));
    zext_ln99_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln99_fu_288_p1),64));
end behav;
